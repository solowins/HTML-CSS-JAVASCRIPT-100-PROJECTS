Sure, let's break down the JavaScript part of the code in more detail:

```javascript
const range = document.getElementById("range");

range.addEventListener("input", (e) => {
  const value = +e.target.value;
  const label = e.target.nextElementSibling;

  const range_width = getComputedStyle(e.target).getPropertyValue("width");
  const label_width = getComputedStyle(label).getPropertyValue("width");

  const num_width = +range_width.substring(0, range_width.length - 2);
  const num_label_width = +label_width.substring(0, label_width.length - 2);

  const max = +e.target.max;
  const min = +e.target.min;

  const left =
    value * (num_width / max) -
    num_label_width / 2 +
    scale(value, min, max, 10, -10);

  label.style.left = `${left}px`;
  label.innerHTML = value;
});

const scale = (num, in_min, in_max, out_min, out_max) => {
  return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;
};
```

### Explanation:

1. **Selection of DOM Elements:**
   - `const range = document.getElementById("range");`: This line selects the range input element with the ID "range" from the HTML document.

2. **Event Listener for Input Changes:**
   - `range.addEventListener("input", (e) => { ... });`: This sets up an event listener for the "input" event on the range input element. The callback function will execute whenever the input value changes.

3. **Extracting Values:**
   - `const value = +e.target.value;`: Retrieves the current value of the range input.
   - `const label = e.target.nextElementSibling;`: Retrieves the next sibling element of the range input, which is the span element used to display the range value.

4. **Calculating Dimensions:**
   - `const range_width = getComputedStyle(e.target).getPropertyValue("width");`: Gets the computed width of the range input.
   - `const label_width = getComputedStyle(label).getPropertyValue("width");`: Gets the computed width of the label (span element).
   - The width values are retrieved as strings with units (e.g., "300px").

5. **Converting Widths to Numbers:**
   - `const num_width = +range_width.substring(0, range_width.length - 2);`: Extracts the numeric value from the width string of the range input (removing "px").
   - `const num_label_width = +label_width.substring(0, label_width.length - 2);`: Extracts the numeric value from the width string of the label.

6. **Determining Min and Max Values:**
   - `const max = +e.target.max;`: Retrieves the maximum value allowed for the range input.
   - `const min = +e.target.min;`: Retrieves the minimum value allowed for the range input.

7. **Calculating Position of Label:**
   - Calculates the left position of the label element relative to the range input based on its value.
   - `left` is calculated using a combination of the range value, range width, label width, and a custom scaling function (`scale()`).

8. **Updating Label Position and Content:**
   - `label.style.left = `${left}px`;`: Sets the left position of the label element using CSS.
   - `label.innerHTML = value;`: Updates the innerHTML of the label to display the current value of the range slider.

9. **Scaling Function:**
   - `const scale = (num, in_min, in_max, out_min, out_max) => { ... };`: Defines a helper function called `scale` that maps a value from one range to another.
   - This function takes a number (`num`) and maps it from an input range (`in_min` to `in_max`) to an output range (`out_min` to `out_max`).


   Sure, let's delve deeper into the CSS part of the code:

```css
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    background: crimson;
    font-family: sans-serif;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    overflow: hidden;
}

.range-container {
    position: relative;
}

input[type="range"] {
    width: 300px;
    margin: 18px 0;
    outline: none;
    -webkit-appearance: none; /* Removes default styling for WebKit browsers */
}

#range-content {
    position: absolute;
    left: 50%;
    top: -50px;
    transform: translateX(-50%);
    background: #000;
    color: #fff;
    white-space: nowrap;
    padding: 10px 15px;
    border-radius: 7px;
    transition: opacity 0.5s ease;
}

#range-content::before {
    content: "";
    position: absolute;
    left: 50%;
    top: 100%;
    transform: translateX(-50%);
    border: 15px solid;
    border-color: #000 #0000 #0000 #0000;
}

input[type="range"]::-webkit-slider-runnable-track {
    background-color: #000;
    width: 100%;
    height: 10px;
    cursor: pointer;
    border-radius: 2px;
}

input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none; /* Removes default styling for WebKit browsers */
    height: 24px;
    width: 24px;
    background-color: #fff;
    border-radius: 50%;
    border: 1px solid black;
    margin-top: -7px;
    cursor: pointer;
}
```

### 1. Universal Selector (`*`):
- Sets margin, padding, and box-sizing properties to zero for all elements on the page.
- Ensures consistent spacing and box model behavior across different elements.

### 2. Body Styling:
- `background: crimson;`: Sets the background color of the body to crimson.
- `font-family: sans-serif;`: Sets the font family to a sans-serif font.
- `display: flex;`: Uses Flexbox layout for the body content.
- `flex-direction: column;`: Sets the main axis of the flex container to be vertical.
- `align-items: center;`: Centers the flex items along the cross axis (horizontally).
- `justify-content: center;`: Centers the flex items along the main axis (vertically).
- `height: 100vh;`: Sets the height of the body to 100% of the viewport height.
- `overflow: hidden;`: Hides any content that overflows the body.

### 3. .range-container Styling:
- `position: relative;`: Sets the positioning context for child elements with absolute positioning.

### 4. input[type="range"] Styling:
- `width: 300px;`: Sets the width of the range input to 300 pixels.
- `margin: 18px 0;`: Sets the top and bottom margins of the range input to 18 pixels and the left and right margins to zero.
- `outline: none;`: Removes the default outline styling for the range input.
- `-webkit-appearance: none;`: Removes default styling for WebKit browsers.

### 5. #range-content Styling:
- `position: absolute;`: Positions the range content absolutely within its containing block.
- `left: 50%;`: Aligns the left edge of the range content to the center of its containing block.
- `top: -50px;`: Sets the top position of the range content to be 50 pixels above its normal position.
- `transform: translateX(-50%);`: Centers the range content horizontally by translating it 50% of its own width to the left.
- `background: #000;`: Sets the background color of the range content to black.
- `color: #fff;`: Sets the text color of the range content to white.
- `white-space: nowrap;`: Prevents wrapping of text inside the range content.
- `padding: 10px 15px;`: Adds padding to the range content.
- `border-radius: 7px;`: Rounds the corners of the range content.
- `transition: opacity 0.5s ease;`: Specifies a transition effect for the opacity property with a duration of 0.5 seconds and an ease timing function.

### 6. #range-content::before Styling:
- `content: "";`: Adds content before the range content.
- `border: 15px solid;`: Sets the border of the pseudo-element.
- `border-color: #000 #0000 #0000 #0000;`: Sets the border colors to create a triangular arrow-like shape.

### 7. input[type="range"]::-webkit-slider-runnable-track Styling:
- `-webkit-slider-runnable-track`: Styles the track of the range input for WebKit browsers.
- `background-color: #000;`: Sets the background color of the track to black.
- `width: 100%;`: Sets the width of the track to 100% of the range input's width.
- `height: 10px;`: Sets the height of the track to 10 pixels.
- `cursor: pointer;`: Changes the cursor to a pointer when hovering over the track.
- `border-radius: 2px;`: Rounds the corners of the track.

### 8. input[type="range"]::-webkit-slider-thumb Styling:
- `-webkit-slider-thumb`: Styles the thumb (slider handle) of the range input for WebKit browsers.
- `height: 24px;`: Sets the height of the thumb to 24 pixels.
- `width: 24px;`: Sets the width of the thumb to 24 pixels.
- `background-color: #fff;`: Sets the background color of the thumb to white.
- `border-radius: 50%;`: Makes the thumb circular by setting its border radius to 50%.
- `border: 1px solid black;`: Sets a solid black border around the thumb.
- `margin-top: -7px;`: Adjusts the vertical position of the thumb to align it with the track.
- `cursor: pointer;`: Changes the cursor to a pointer when hovering over the thumb.

These CSS styles create the visual appearance and layout of the custom range slider. They define the colors, dimensions, positions, and behaviors of various elements to achieve the desired design.